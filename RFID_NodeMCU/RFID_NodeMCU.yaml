# ESPHome configuration for NFC Reader with PN532 and NodeMCU
#

substitutions:
  name: nfc-reader
  friendly_name: nfc-reader
  http_endoint: "http://192.168.2.113:8080/process/?card_id="

globals:
  - id: source
    type: std::string
  - id: url
    type: std::string
  - id: info
    type: std::string

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  on_boot:
    priority: -10
    then:
    # - wait_until:
    #     api.connected:
    # - logger.log: API is connected!
    - rtttl.play: "success:d=24,o=5,b=100:c,g,b"
    - light.turn_on:
        id: activity_led
        brightness: 100%
        red: 0%
        green: 0%
        blue: 100%
        flash_length: 500ms
    # - switch.turn_on: buzzer_enabled
    - switch.turn_on: led_enabled

switch:
- platform: template
  name: "${friendly_name} Buzzer Enabled"
  id: buzzer_enabled
  icon: mdi:volume-high
  optimistic: true
  restore_mode: RESTORE_DEFAULT_ON
  entity_category: config
- platform: template
  name: "${friendly_name} LED enabled"
  id: led_enabled
  icon: mdi:alarm-light-outline
  optimistic: true
  restore_mode: RESTORE_DEFAULT_ON
  entity_category: config

esp8266:
  board: d1_mini

# Enable logging
logger:
  level: INFO

# Enable Home Assistant API
# api:
#   encryption:
#     key: "S0dEytZIewf/X5JOUOg2SSaldF2V0jyztJGFwv7pzF8="
#   services:
#   - service: rfidreader_tag_ok
#     then:
#     - rtttl.play: "beep:d=16,o=5,b=100:b"

#   - service: rfidreader_tag_ko
#     then:
#     - rtttl.play: "beep:d=8,o=5,b=100:b"

#   - service: play_rtttl
#     variables:
#       song_str: string
#     then:
#     - rtttl.play: !lambda 'return song_str;'

ota:
  - platform: esphome
    password: "1acca0879dd6672ba2991672a5905df9"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Nfc-Reader Fallback Hotspot"
    password: "Z144k7fG9esa"

captive_portal:

button:
  - platform: restart
    name: "${friendly_name} Restart"
    entity_category: config

i2c:
  scan: False
  frequency: 400kHz

http_request:
  esp8266_disable_ssl_support: True
  timeout: 
    seconds: 10

pn532_i2c:
  id: pn532_board
  on_tag:
    then:
    - if:
        condition:
          switch.is_on: led_enabled
        then:
        - light.turn_on:
            id: activity_led
            brightness: 100%
            red: 0%
            green: 0%
            blue: 100%
            flash_length: 500ms
    - lambda: |-
        ESP_LOGI("ndef", "Fount Tag: %s", x.c_str());
    - http_request.get:
        # return endpoint + uid (and sanitize uid in c++)
        url: !lambda |-
          x.erase(std::remove(x.begin(), x.end(), '-'), x.end());
          return ((std::string) "${http_endoint}" + x);
        on_response:
          then:
            - logger.log:
                level: INFO
                format: 'Response status: %d, Duration: %u ms'
                args:
                  - response->status_code
                  - response->duration_ms
            - if:
                condition:
                  switch.is_on: led_enabled
                then:
                - light.turn_on:
                    id: activity_led
                    brightness: 100%
                    red: 0%
                    green: 100%
                    blue: 0%
                    flash_length: 1000ms
        on_error:
          then:
            - logger.log:
                format: "Request failed!"
                level: WARN
            - if:
                condition:
                  switch.is_on: led_enabled
                then:
                - light.turn_on:
                    id: activity_led
                    brightness: 100%
                    red: 100%
                    green: 0%
                    blue: 0%
                    flash_length: 1000ms
    
    - if:
        condition:
          switch.is_on: buzzer_enabled
        then:
        - rtttl.play: "success:d=24,o=5,b=100:c,g,b"
  on_tag_removed:
    then:
    # - homeassistant.event:
    #     event: esphome.tag_removed

# Define the buzzer output
output:
- platform: esp8266_pwm
  pin: D7
  id: buzzer

binary_sensor:
  - platform: status
    name: "${friendly_name} Status"
    entity_category: diagnostic

# Define buzzer as output for RTTTL
rtttl:
  output: buzzer

# Configure LED
light:
- platform: neopixelbus
  variant: WS2812
  pin: RX
  num_leds: 1
  flash_transition_length: 500ms
  type: GRB
  id: activity_led
  name: "${friendly_name} LED"
  restore_mode: ALWAYS_OFF